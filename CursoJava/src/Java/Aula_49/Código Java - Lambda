===============================
          Aula 49
===============================

Classe: Aula_49A
-------------------------------
- Objetivo: Demonstrar o uso de `ArrayList` e expressões lambda para manipulação de listas em Java.
- O que faz:
  - Cria uma lista de números inteiros.
  - Dobra os números e separa em listas de pares e ímpares.

  Código:
  package Java.Aula_49;

  import java.util.ArrayList;
  import java.util.function.Consumer;

  public class Aula_49A {
      public static void main(String[] args) {
          ArrayList<Integer> num = new ArrayList<Integer>();
          ArrayList<Integer> dobro = new ArrayList<Integer>();
          ArrayList<Integer> par = new ArrayList<Integer>();
          ArrayList<Integer> impar = new ArrayList<Integer>();

          num.add(1);
          num.add(2);
          num.add(3);
          num.add(4);
          num.add(5);
          num.add(6);
          

          Consumer<Integer> dobrar = (n) -> {
              dobro.add(n * 2);
              if (n % 2 == 0) {
                  par.add(n);
              } else {
                  impar.add(n);
              }
          };

          num.forEach(dobrar);

          System.out.println(num);
          System.out.println(dobro);
          System.out.println(par);
          System.out.println(impar);
      }
  }

Classe: Aula_49B
-------------------------------
- Objetivo: Continuar a demonstração do uso de `ArrayList` e expressões lambda.
- O que faz:
  - Cria uma lista de números inteiros e realiza operações de divisão, soma e subtração.

  Código:
  package Java.Aula_49;

  import java.util.ArrayList;

  public class Aula_49B {
      public static void main(String[] args) {
          ArrayList<Integer> val = new ArrayList<Integer>();
          ArrayList<Integer> dividido = new ArrayList<Integer>();
          ArrayList<Integer> soma = new ArrayList<Integer>();
          ArrayList<Integer> subtração = new ArrayList<Integer>();

          val.add(1);
          val.add(2);
          val.add(3);
          val.add(4);

          val.forEach((v) -> {
              dividido.add(v / 2);
              soma.add(v + v);
              subtração.add(v - 2);
          });

          System.out.println(val);
          System.out.println(dividido);
          System.out.println(soma);
          System.out.println(subtração);
      }
  }

===============================
          Explicação
===============================

1. **Uso de ArrayList**:
   - `ArrayList` é uma coleção que permite armazenar elementos de forma dinâmica.

2. **Expressões Lambda**:
   - As expressões lambda são utilizadas para implementar interfaces funcionais, permitindo simplificar a sintaxe de código.

3. **Operações em Listas**:
   - A primeira classe divide os números em pares e ímpares, enquanto a segunda realiza operações matemáticas como divisão, soma e subtração.

===============================
          Saída Esperada
===============================

Quando os métodos `main` das classes são executados, a saída será:

Para `Aula_49A`:
[1, 2, 3, 4, 5, 6]
[2, 4, 6, 8, 10, 12]
[2, 4, 6]
[1, 3, 5]


Para `Aula_49B`:
[1, 2, 3, 4]
[0, 1, 1, 2]
[2, 4, 6, 8]
[-1, 0, 1, 2]

===============================
          Resumo
===============================

- **Manipulação de Listas**: Os exemplos demonstram como utilizar `ArrayList` e expressões lambda em Java.
- **Operações Matemáticas**: Mostra como realizar operações em cada elemento da lista de forma concisa.
- **Separação de Dados**: A primeira classe exemplifica como separar dados em diferentes categorias (pares e ímpares).

===============================
          Fim
===============================